from .agent_based_api.v1.type_defs import (
    CheckResult,
    DiscoveryResult,
)

from .agent_based_api.v1 import (
    register,
    render,
    Result,
    Metric,
    State,
    Service,
)

import json

def parse_rocm_smi(string_table):
    parsed = {}
    data = json.loads(string_table)
    
    for gpu_key, gpu_info in data.items():
        if gpu_key.startswith('card'):
            gpu_id = int(gpu_key.replace('card', ''))
            parsed[gpu_id] = {
                'name': gpu_info.get('Device Name', 'Unknown').replace(' ', '_'),
                'gpu_util': gpu_info.get('GPU use (%)', '0'),
                'mem_util': gpu_info.get('GPU Memory Allocated (VRAM%)', '0'),
                'temperature': gpu_info.get('Temperature (Sensor junction) (C)', '0'),
                'power_draw': gpu_info.get('Current Socket Graphics Package Power (W)', '0.0'),
                'current_memory_usage': gpu_info.get('GPU Memory Allocated (VRAM%)', '0'),
                'num_processes': gpu_info.get('num_processes', '0'),
                'sclk_clock_level': gpu_info.get('sclk_clock_level', 'N/A'),
                'performance_level': gpu_info.get('performance_level', 'N/A'),
                'pci_bus': gpu_info.get('pci_bus', 'N/A'),
            }
    # Handle system section for PIDs
    system_info = data.get('system', {})
    for key, value in system_info.items():
        if key.startswith("PID"):
            parts = value.split(",")
            if len(parts) >= 5:
                gpu_index = parts[4].strip()
                if gpu_index.isdigit():
                    gpu_id = int(gpu_index)
                    if gpu_id in parsed:
                        parsed[gpu_id]['num_processes'] = int(parsed[gpu_id]['num_processes']) + 1
                    else:
                        parsed[gpu_id] = {
                            'num_processes': 1,
                            'name': 'Unknown',
                            'gpu_util': '0',
                            'mem_util': '0',
                            'temperature': '0',
                            'power_draw': '0.0',
                            'current_memory_usage': '0',
                            'sclk_clock_level': 'N/A',
                            'performance_level': 'N/A',
                            'pci_bus': 'N/A',
                        }
    return parsed

register.agent_section(
    name="rocm_smi",
    parse_function=parse_rocm_smi,
)

def discover_rocm_smi_metrics(section) -> DiscoveryResult:
    for gpu_id, data in section.items():
        yield Service(item=f'GPU{gpu_id}')

def check_rocm_smi_gpuutil(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return

    data = section[gpu_id]
    try:
        gpu_util = int(data['gpu_util'])
        yield Metric('gpu_utilization', gpu_util, levels=(90, 100))
        
        if gpu_util > 100:
            yield Result(state=State.CRIT, summary=f"{data['name']} utilization is {gpu_util}%")
        elif gpu_util > 90:
            yield Result(state=State.WARN, summary=f"{data['name']} utilization is {gpu_util}%")
        else:
            yield Result(state=State.OK, summary=f"{data['name']} utilization is {gpu_util}%")
    except ValueError:
        yield Result(state=State.UNKNOWN, summary="Unable to parse GPU utilization")

def check_rocm_smi_memory_util(section) -> CheckResult:
    for gpu_id, data in section.items():
        yield Service(item=f'GPU{gpu_id}')

def check_rocm_smi_memory(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return

    data = section[gpu_id]
    try:
        mem_util = int(data['mem_util'])
        yield Metric('memory_utilization', mem_util, levels=(80, 90))
        
        if mem_util > 90:
            yield Result(state=State.CRIT, summary=f"{data['name']} memory utilization is {mem_util}%")
        elif mem_util > 80:
            yield Result(state=State.WARN, summary=f"{data['name']} memory utilization is {mem_util}%")
        else:
            yield Result(state=State.OK, summary=f"{data['name']} memory utilization is {mem_util}%")
    except ValueError:
        yield Result(state=State.UNKNOWN, summary="Unable to parse memory utilization")

def check_rocm_smi_temperature(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return

    data = section[gpu_id]
    try:
        temperature = float(data['temperature'])
        yield Metric('temperature', temperature, levels=(80, 90))
        
        if temperature > 90:
            yield Result(state=State.CRIT, summary=f"{data['name']} temperature is {temperature}°C")
        elif temperature > 80:
            yield Result(state=State.WARN, summary=f"{data['name']} temperature is {temperature}°C")
        else:
            yield Result(state=State.OK, summary=f"{data['name']} temperature is {temperature}°C")
    except ValueError:
        yield Result(state=State.UNKNOWN, summary="Unable to parse temperature")

def check_rocm_smi_power_draw(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return

    data = section[gpu_id]
    try:
        power_draw = float(data['power_draw'])
        # Assuming there's no power limit available; adjust thresholds as needed
        yield Metric('power_draw', power_draw, levels=(300, 350))  # Example thresholds
        
        if power_draw > 350:
            yield Result(state=State.CRIT, summary=f"{data['name']} power draw is {power_draw}W")
        elif power_draw > 300:
            yield Result(state=State.WARN, summary=f"{data['name']} power draw is {power_draw}W")
        else:
            yield Result(state=State.OK, summary=f"{data['name']} power draw is {power_draw}W")
    except ValueError:
        yield Result(state=State.UNKNOWN, summary="Unable to parse power draw")

def check_rocm_smi_num_processes(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return

    data = section[gpu_id]
    try:
        num_processes = int(data['num_processes'])
        yield Metric('num_processes', num_processes, levels=(10, 20))
        
        if num_processes > 20:
            yield Result(state=State.CRIT, summary=f"{data['name']} has {num_processes} running processes")
        elif num_processes > 10:
            yield Result(state=State.WARN, summary=f"{data['name']} has {num_processes} running processes")
        else:
            yield Result(state=State.OK, summary=f"{data['name']} has {num_processes} running processes")
    except ValueError:
        yield Result(state=State.UNKNOWN, summary="Unable to parse number of processes")

def check_rocm_smi_sclk_clock_freq(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return

    data = section[gpu_id]
    sclk_clock_level = data.get('sclk_clock_level', 'N/A')
    try:
        # Extract the frequency from the string, e.g., "1 (2076Mhz)"
        freq_str = sclk_clock_level.split('(')[1].replace('Mhz)', '')
        sclk_freq = int(freq_str)
        yield Metric('sclk_clock_freq', sclk_freq, levels=(1500, 2000))  # Example thresholds
        
        if sclk_freq > 2000:
            yield Result(state=State.CRIT, summary=f"{data['name']} SCLK frequency is {sclk_freq}MHz")
        elif sclk_freq > 1500:
            yield Result(state=State.WARN, summary=f"{data['name']} SCLK frequency is {sclk_freq}MHz")
        else:
            yield Result(state=State.OK, summary=f"{data['name']} SCLK frequency is {sclk_freq}MHz")
    except (IndexError, ValueError):
        yield Result(state=State.UNKNOWN, summary="Unable to parse SCLK clock frequency")

def discover_rocm_smi_sclk_clock_freq(section) -> DiscoveryResult:
    for gpu_id, data in section.items():
        if 'sclk_clock_level' in data:
            yield Service(item=f'GPU{gpu_id}')

def discover_rocm_smi_performance_level(section) -> DiscoveryResult:
    for gpu_id, data in section.items():
        if 'performance_level' in data:
            yield Service(item=f'GPU{gpu_id}')

def check_rocm_smi_performance_level(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return
    
    data = section[gpu_id]
    performance_level = data.get('performance_level', 'N/A').lower()
    
    if performance_level == 'auto':
        yield Result(state=State.OK, summary=f"{data['name']} performance level is auto")
    else:
        yield Result(state=State.WARN, summary=f"{data['name']} performance level is {performance_level}")

def discover_rocm_smi_pci_bus(section) -> DiscoveryResult:
    for gpu_id, data in section.items():
        if 'pci_bus' in data:
            yield Service(item=f'GPU{gpu_id}')

def check_rocm_smi_pci_bus(item: str, section) -> CheckResult:
    gpu_id = int(item.replace('GPU', ''))
    if gpu_id not in section:
        return
    
    data = section[gpu_id]
    pci_bus = data.get('pci_bus', 'N/A')
    
    # Typically, PCI Bus ID is an identifier and not a metric to monitor. 
    # You can display it as a label or handle it as a static information.
    yield Result(state=State.OK, summary=f"{data['name']} PCI Bus ID is {pci_bus}")

# Registering Check Plugins

register.check_plugin(
    name="rocm_smi_gpuutil",
    service_name="GPU %s Utilization",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_metrics,
    check_function=check_rocm_smi_gpuutil,
)

register.check_plugin(
    name="rocm_smi_memory_util",
    service_name="GPU %s Memory Utilization",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_metrics,
    check_function=check_rocm_smi_memory,
)

register.check_plugin(
    name="rocm_smi_temperature",
    service_name="GPU %s Temperature",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_metrics,
    check_function=check_rocm_smi_temperature,
)

register.check_plugin(
    name="rocm_smi_power_draw",
    service_name="GPU %s Power Draw",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_metrics,
    check_function=check_rocm_smi_power_draw,
)

register.check_plugin(
    name="rocm_smi_num_processes",
    service_name="GPU %s Processes",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_metrics,
    check_function=check_rocm_smi_num_processes,
)

register.check_plugin(
    name="rocm_smi_sclk_clock_freq",
    service_name="GPU %s SCLK Clock Frequency",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_sclk_clock_freq,
    check_function=check_rocm_smi_sclk_clock_freq,
)

register.check_plugin(
    name="rocm_smi_performance_level",
    service_name="GPU %s Performance Level",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_performance_level,
    check_function=check_rocm_smi_performance_level,
)

register.check_plugin(
    name="rocm_smi_pci_bus",
    service_name="GPU %s PCI Bus ID",
    sections=["rocm_smi"],
    discovery_function=discover_rocm_smi_pci_bus,
    check_function=check_rocm_smi_pci_bus,
)
