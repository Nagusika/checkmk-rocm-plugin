import subprocess
import json

def get_rocm_smi_data():
    try:
        # Execute the rocm-smi command with the necessary options and JSON output
        result = subprocess.run([
            'rocm-smi', '--alldevices', '--showid', '--showbus', '--showuse',
            '--showmemuse', '--showtemp', '--showpower', '--showpids',
            '--showgpuclocks', '--showperflevel', '--showdriverversion',
            '--json'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        data = json.loads(result.stdout)
        return data
    except subprocess.CalledProcessError as e:
        print(f"Error executing rocm-smi: {e.stderr}")
        return None
    except json.JSONDecodeError:
        print("Error decoding JSON output from rocm-smi")
        return None

def count_pids_per_gpu(system_info):
    pid_counts = {}
    for key, value in system_info.items():
        if key.startswith("PID"):
            # Example value: "pt_main_thread, 1, 60259643392, 0, 0"
            parts = value.split(",")
            if len(parts) >= 5:
                gpu_index = parts[4].strip()
                if gpu_index.isdigit():
                    gpu_id = int(gpu_index)
                    pid_counts[gpu_id] = pid_counts.get(gpu_id, 0) + 1
    return pid_counts

def parse_gpu_info(gpu_key, gpu_info, pid_counts):
    # Extract GPU ID from the key (e.g., 'card0' -> 0)
    try:
        gpu_id = int(gpu_key.replace('card', ''))
    except ValueError:
        gpu_id = "Unknown"
    
    # Replace spaces with underscores in GPU name
    gpu_name = gpu_info.get('Device Name', 'Unknown').replace(' ', '_')
    
    # GPU Utilization
    gpu_utilization = gpu_info.get('GPU use (%)', '0')
    try:
        gpu_utilization = int(gpu_utilization)
    except ValueError:
        gpu_utilization = 0
    
    # Memory Utilization (VRAM%)
    mem_utilization = gpu_info.get('GPU Memory Allocated (VRAM%)', '0')
    try:
        mem_utilization = int(mem_utilization)
    except ValueError:
        mem_utilization = 0
    
    # Temperature (Sensor junction)
    temperature = gpu_info.get('Temperature (Sensor junction) (C)', '0')
    try:
        temperature = float(temperature)
    except ValueError:
        temperature = 0.0
    
    # Power Draw (Current Socket Graphics Package Power)
    power_draw = gpu_info.get('Current Socket Graphics Package Power (W)', '0.0')
    try:
        power_draw = float(power_draw)
    except ValueError:
        power_draw = 0.0
    
    # Current Memory Usage (same as memory utilization)
    current_memory_usage = mem_utilization  # Percentage
    
    # Number of Processes
    num_processes = pid_counts.get(gpu_id, 0)
    
    # Additional Information
    sclk_clock_level = gpu_info.get('sclk clock level', 'N/A')
    performance_level = gpu_info.get('Performance Level', 'N/A')
    pci_bus = gpu_info.get('PCI Bus', 'N/A')
    
    return {
        'gpu_id': gpu_id,
        'gpu_name': gpu_name,
        'gpu_utilization': gpu_utilization,
        'mem_utilization': mem_utilization,
        'temperature': temperature,
        'power_draw': power_draw,
        'current_memory_usage': current_memory_usage,
        'num_processes': num_processes,
        'sclk_clock_level': sclk_clock_level,
        'performance_level': performance_level,
        'pci_bus': pci_bus
    }

def main():
    print("<<<rocm_smi>>>")
    data = get_rocm_smi_data()
    if not data:
        return
    
    # Count the number of PIDs per GPU
    system_info = data.get('system', {})
    pid_counts = count_pids_per_gpu(system_info)
    
    # Iterate over each GPU
    for gpu_key in sorted(data.keys()):
        if gpu_key.startswith('card'):
            gpu_info = data[gpu_key]
            info = parse_gpu_info(gpu_key, gpu_info, pid_counts)
            print(f"{info['gpu_id']} {info['gpu_name']} "
                  f"{info['gpu_utilization']}% {info['mem_utilization']}% "
                  f"{info['temperature']}Â°C {info['power_draw']}W "
                  f"{info['current_memory_usage']}% {info['num_processes']} "
                  f"{info['sclk_clock_level']} {info['performance_level']} {info['pci_bus']}")

if __name__ == "__main__":
    main()
